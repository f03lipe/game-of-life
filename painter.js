// Generated by CoffeeScript 1.4.0
(function() {
  var Painter;

  Painter = (function() {
    var addFpsCounter, drawDot, drawGrid, fpsFilter, lastUpdate, makeLine, resetFpsCounter;

    drawDot = function(context, x, y, color) {
      if (color == null) {
        color = "black";
      }
      context.strokeStyle = color;
      context.beginPath();
      context.arc(x, y, 2, 0, 2 * Math.PI, true);
      return context.fill();
    };

    makeLine = function(context, x, y, x2, y2, lineWidth, color) {
      if (lineWidth == null) {
        lineWidth = 0.1;
      }
      if (color == null) {
        color = "black";
      }
      context.strokeStyle = color;
      context.lineWidth = lineWidth;
      context.beginPath();
      context.moveTo(x, y);
      context.lineTo(x2, y2);
      return context.stroke();
    };

    drawGrid = function(canvas, gridSize) {
      var context, icol, iline, _i, _j, _ref, _ref1, _results;
      context = canvas.getContext("2d");
      context.clearRect(0, 0, canvas.width, canvas.height);
      for (icol = _i = 0, _ref = canvas.width / gridSize; 0 <= _ref ? _i < _ref : _i > _ref; icol = 0 <= _ref ? ++_i : --_i) {
        makeLine(context, gridSize * icol, 0, gridSize * icol, canvas.height, .1, 'grey');
      }
      _results = [];
      for (iline = _j = 0, _ref1 = canvas.height / gridSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; iline = 0 <= _ref1 ? ++_j : --_j) {
        _results.push(makeLine(context, 0, gridSize * iline, canvas.width, gridSize * iline, .1, 'grey'));
      }
      return _results;
    };

    Painter.prototype.incStateCounter = function() {
      window.stateCount += 1;
      return document.querySelector(".count").innerHTML = window.stateCount;
    };

    Painter.prototype.resetStateCounter = function() {
      window.stateCount = 1;
      return document.querySelector(".count").innerHTML = window.stateCount;
    };

    window.fps = 0;

    lastUpdate = (new Date) * 1 - 1;

    fpsFilter = 50;

    addFpsCounter = function() {
      var fpsOut,
        _this = this;
      fpsOut = document.getElementById('fps');
      return setInterval(function() {
        return fpsOut.innerHTML = window.fps.toFixed(1);
      }, 500);
    };

    resetFpsCounter = function() {
      return window.fps = 0;
    };

    Painter.prototype.gridSize = 10;

    Painter.prototype.initialPop = 1000;

    Painter.prototype.fps = 20;

    function Painter() {
      var elm, id, _ref;
      this.canvas = {
        grid: document.createElement("canvas"),
        board: document.createElement("canvas")
      };
      _ref = this.canvas;
      for (id in _ref) {
        elm = _ref[id];
        elm.id = id;
        elm.width = $(window).width();
        elm.height = $(window).height();
        $(elm).appendTo($(".wrapper"));
      }
      drawGrid(this.canvas.grid, this.gridSize);
      this.board = new Board(this.canvas.board, this.gridSize, this.initialPop);
      this.dispatcher = new EventDispatcher(this.board, this);
    }

    Painter.prototype.changeBoardSpecs = function(obj) {
      var _ref, _ref1, _ref2;
      this.fps = (_ref = obj.fps) != null ? _ref : this.fps;
      this.initialPop = (_ref1 = obj.initialPop) != null ? _ref1 : this.initialPop;
      this.gridSize = (_ref2 = obj.gridSize) != null ? _ref2 : this.gridSize;
      drawGrid(this.canvas.grid, this.gridSize);
      window.stateCount = 0;
      this.resetStateCounter();
      resetFpsCounter();
      return this.board.resetBoard(this.initialPop, this.gridSize);
    };

    Painter.prototype._loop = function() {
      var now, thisFrameFPS,
        _this = this;
      if (window.canvasStop || window.mouseDown && window.mouseOverCanvas) {
        return;
      }
      this.board.tic();
      thisFrameFPS = 1000 / ((now = new Date) - lastUpdate);
      window.fps += (thisFrameFPS - window.fps) / 1;
      lastUpdate = now * 1 - 1;
      return window.setTimeout(function() {
        return _this._loop();
      }, 1000 / this.fps);
    };

    Painter.prototype.loop = function() {
      addFpsCounter();
      console.log("Start looping board");
      return this._loop();
    };

    return Painter;

  })();

  window.AnimateOnFrameRate = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  window.onload = function() {
    window.painter = new Painter(20, 100);
    window.painter.loop();
  };

}).call(this);
